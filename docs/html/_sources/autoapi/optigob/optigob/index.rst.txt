optigob.optigob
===============

.. py:module:: optigob.optigob

.. autoapi-nested-parse::

   Optigob module
   ==============

   This module provides the Optigob class, which serves as the central interface for retrieving, aggregating, and analyzing all model outputs related to land use, emissions, protein, bioenergy, harvested wood products, and substitution impacts in the FORESIGHT system. The Optigob class enables unified access to both baseline and scenario results, supporting sectoral and total values for CO2e, CO2, CH4, N2O, land area (aggregated/disaggregated/HNV), protein, bioenergy, harvested wood products, and substitution impacts. All results can be returned as dictionaries or tidy Pandas DataFrames for further analysis and reporting.

   Class:
       Optigob: Central interface for retrieving and aggregating all model outputs by sector and scenario.

   .. method:: __init__(self, optigob_data_manager)

      Initialize the Optigob class with the provided data manager.

   .. method:: check_net_zero_status(self)

      Check if the model is set to net zero (returns bool).

   .. method:: get_livestock_split_gas_ch4_emission_budget(self)

      Retrieve total livestock split gas CH4 emissions (kt) budget available.

   .. method:: total_emission_co2e(self)

      Return the total scenario CO2e emissions (kt) for all sectors combined.

   .. method:: get_baseline_co2e_emissions_by_sector(self)

      Retrieve baseline CO2e emissions by sector.

   .. method:: get_baseline_ch4_emissions_by_sector(self)

      Retrieve baseline CH4 emissions by sector.

   .. method:: get_baseline_n2o_emissions_by_sector(self)

      Retrieve baseline N2O emissions by sector.

   .. method:: get_baseline_co2_emissions_by_sector(self)

      Retrieve baseline CO2 emissions by sector.

   .. method:: get_baseline_co2e_emissions_total(self)

      Retrieve total baseline CO2e emissions.

   .. method:: get_baseline_co2_emissions_total(self)

      Retrieve total baseline CO2 emissions.

   .. method:: get_baseline_ch4_emissions_total(self)

      Retrieve total baseline CH4 emissions.

   .. method:: get_baseline_n2o_emissions_total(self)

      Retrieve total baseline N2O emissions.

   .. method:: get_scenario_co2e_emissions_by_sector(self)

      Retrieve scenario CO2e emissions by sector.

   .. method:: get_scenario_ch4_emissions_by_sector(self)

      Retrieve scenario CH4 emissions by sector.

   .. method:: get_scenario_n2o_emissions_by_sector(self)

      Retrieve scenario N2O emissions by sector.

   .. method:: get_scenario_co2_emissions_by_sector(self)

      Retrieve scenario CO2 emissions by sector.

   .. method:: get_total_emissions_co2e_by_sector(self)

      Retrieve total CO2e emissions by sector for both baseline and scenario.

   .. method:: get_total_emissions_ch4_by_sector(self)

      Retrieve total CH4 emissions by sector for both baseline and scenario.

   .. method:: get_total_emissions_n2o_by_sector(self)

      Retrieve total N2O emissions by sector for both baseline and scenario.

   .. method:: get_total_emissions_co2_by_sector(self)

      Retrieve total CO2 emissions by sector for both baseline and scenario.

   .. method:: get_total_emissions_co2e_by_sector_df(self)

      Return total CO2e emissions as a tidy DataFrame.

   .. method:: get_aggregated_total_land_area_by_sector(self)

      Retrieve aggregated land area by sector for both baseline and scenario.

   .. method:: get_aggregated_total_land_area_by_sector_df(self)

      Return aggregated land area as a tidy DataFrame.

   .. method:: get_disaggregated_total_land_area_by_sector(self)

      Retrieve disaggregated land area by sector for both baseline and scenario.

   .. method:: get_disaggregated_total_land_area_by_sector_df(self)

      Return disaggregated land area as a tidy DataFrame.

   .. method:: get_total_protein_by_sector(self)

      Retrieve total protein by sector for both baseline and scenario.

   .. method:: get_total_protein_by_sector_df(self)

      Return total protein as a tidy DataFrame.

   .. method:: get_total_hnv_land_area_by_sector(self)

      Retrieve HNV land area by sector for both baseline and scenario.

   .. method:: get_total_hnv_land_area_by_sector_df(self)

      Return HNV land area as a tidy DataFrame.

   .. method:: get_bioenergy_by_sector(self)

      Retrieve bioenergy area by sector for both baseline and scenario.

   .. method:: get_bioenergy_by_sector_df(self)

      Return bioenergy area as a tidy DataFrame.

   .. method:: get_hwp_volume(self)

      Retrieve harvested wood product volume for both baseline and scenario.

   .. method:: get_hwp_volume_df(self)

      Return harvested wood product volume as a tidy DataFrame.

   .. method:: get_substitution_emission_by_sector_co2e(self)

      Retrieve substitution emissions by sector for CO2e.

   .. method:: get_substitution_emission_by_sector_co2e_df(self)

      Return substitution emissions for CO2e as a tidy DataFrame.

   .. method:: get_substitution_emission_by_sector_co2(self)

      Retrieve substitution emissions by sector for CO2.

   .. method:: get_substitution_emission_by_sector_co2_df(self)

      Return substitution emissions for CO2 as a tidy DataFrame.

   .. method:: get_substitution_emission_by_sector_ch4(self)

      Retrieve substitution emissions by sector for CH4.

   .. method:: get_substitution_emission_by_sector_ch4_df(self)

      Return substitution emissions for CH4 as a tidy DataFrame.

   .. method:: get_substitution_emission_by_sector_n2o(self)

      Retrieve substitution emissions by sector for N2O.

   .. method:: get_substitution_emission_by_sector_n2o_df(self)

      Return substitution emissions for N2O as a tidy DataFrame.

   .. method:: get_livestock_population(self)

      Retrieve livestock population for both baseline and scenario.

   .. method:: get_livestock_population_df(self)

      Return livestock population as a tidy DataFrame.
      



Classes
-------

.. autoapisummary::

   optigob.optigob.Optigob


Module Contents
---------------

.. py:class:: Optigob(optigob_data_manager)

   Central interface for retrieving, aggregating, and analyzing all model outputs in the FORESIGHT system.

   The Optigob class provides a unified API for accessing emissions, land area, protein, bioenergy, harvested wood products, and substitution impacts for both baseline and scenario cases. It wraps all major model outputs, including sectoral and total values for CO2e, CO2, CH4, N2O, land area (aggregated/disaggregated/HNV), protein, bioenergy, harvested wood products, and substitution impacts. All results can be returned as dictionaries or tidy Pandas DataFrames for further analysis and reporting.

   :param optigob_data_manager: An instance of the data manager class, typically OptiGobDataManager, providing access to all model data and configuration.


   .. py:attribute:: data_manager_class


   .. py:attribute:: baseline_emission


   .. py:attribute:: emission_budget


   .. py:attribute:: land_area_budget


   .. py:attribute:: econ_output


   .. py:attribute:: split_gas


   .. py:method:: get_livestock_co2e_emission_budget()

      Retrieve the total livestock CO2e emissions (kt) budget available for the scenario.

      :returns: Total livestock CO2e emissions budget in kilotons.
      :rtype: float



   .. py:method:: get_livestock_split_gas_ch4_emission_budget()

      Retrieve the total livestock split gas CH4 emissions (kt) budget available for the scenario.

      :returns: Total livestock split gas CH4 emissions budget in kilotons.
      :rtype: float

      :raises ValueError: If split gas is not included in the model configuration.



   .. py:method:: total_emission_co2e()

      Return the total scenario CO2e emissions (kt) for all sectors combined.

      :returns: Total scenario CO2e emissions in kilotons.
      :rtype: float



   .. py:method:: check_net_zero_status()

      Check if the model is set to net zero, using either the split gas or net zero budget as appropriate.

      :returns: True if the model is set to net zero (or split gas net zero), False otherwise. None if not applicable.
      :rtype: bool or None



   .. py:method:: get_baseline_co2e_emissions_by_sector()

      Retrieve baseline CO2e emissions by sector.

      :returns: Sectors as keys and baseline CO2e emissions (kt) as values.
      :rtype: dict



   .. py:method:: get_baseline_ch4_emissions_by_sector()

      Retrieve baseline CH4 emissions by sector.

      :returns: Sectors as keys and baseline CH4 emissions (kt) as values.
      :rtype: dict



   .. py:method:: get_baseline_n2o_emissions_by_sector()

      Retrieve baseline N2O emissions by sector.

      :returns: Sectors as keys and baseline N2O emissions (kt) as values.
      :rtype: dict



   .. py:method:: get_baseline_co2_emissions_by_sector()

      Retrieve baseline CO2 emissions by sector.

      :returns: Sectors as keys and baseline CO2 emissions (kt) as values.
      :rtype: dict



   .. py:method:: get_baseline_co2e_emissions_total()

      Retrieve total baseline CO2e emissions.

      :returns: Total baseline CO2e emissions in kilotons.
      :rtype: float



   .. py:method:: get_baseline_co2_emissions_total()

      Retrieve total baseline CO2 emissions.

      :returns: Total baseline CO2 emissions in kilotons.
      :rtype: float



   .. py:method:: get_baseline_ch4_emissions_total()

      Retrieve total baseline CH4 emissions.

      :returns: Total baseline CH4 emissions in kilotons.
      :rtype: float



   .. py:method:: get_baseline_n2o_emissions_total()

      Retrieve total baseline N2O emissions.

      :returns: Total baseline N2O emissions in kilotons.
      :rtype: float



   .. py:method:: get_scenario_co2e_emissions_by_sector()

      Retrieve scenario CO2e emissions by sector.

      :returns: Sectors as keys and scenario CO2e emissions (kt) as values.
      :rtype: dict



   .. py:method:: get_scenario_ch4_emissions_by_sector()

      Retrieve scenario CH4 emissions by sector.

      :returns: Sectors as keys and scenario CH4 emissions (kt) as values.
      :rtype: dict



   .. py:method:: get_scenario_n2o_emissions_by_sector()

      Retrieve scenario N2O emissions by sector.

      :returns: Sectors as keys and scenario N2O emissions (kt) as values.
      :rtype: dict



   .. py:method:: get_scenario_co2_emissions_by_sector()

      Retrieve scenario CO2 emissions by sector.

      :returns: Sectors as keys and scenario CO2 emissions (kt) as values.
      :rtype: dict



   .. py:method:: get_total_emissions_co2e_by_sector()

      Retrieve total CO2e emissions by sector for both baseline and scenario.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of sector emissions as values.
      :rtype: dict



   .. py:method:: get_total_emissions_ch4_by_sector()

      Retrieve total CH4 emissions by sector for both baseline and scenario.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of sector emissions as values.
      :rtype: dict



   .. py:method:: get_total_emissions_n2o_by_sector()

      Retrieve total N2O emissions by sector for both baseline and scenario.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of sector emissions as values.
      :rtype: dict



   .. py:method:: get_total_emissions_co2_by_sector()

      Retrieve total CO2 emissions by sector for both baseline and scenario.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of sector emissions as values.
      :rtype: dict



   .. py:method:: get_total_emissions_co2e_by_sector_df()

      Return total CO2e emissions as a tidy DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.

      :returns: DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



   .. py:method:: get_aggregated_total_land_area_by_sector()

      Retrieve aggregated land area by sector for both baseline and scenario.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of sector land areas as values.
      :rtype: dict



   .. py:method:: get_aggregated_total_land_area_by_sector_df()

      Return aggregated land area as a tidy DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.

      :returns: DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



   .. py:method:: get_disaggregated_total_land_area_by_sector()

      Retrieve disaggregated land area by sector for both baseline and scenario.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of disaggregated sector land areas as values.
      :rtype: dict



   .. py:method:: get_disaggregated_total_land_area_by_sector_df()

      Return disaggregated land area as a tidy DataFrame with disaggregated sectors as rows and 'baseline' and 'scenario' as columns.

      :returns: DataFrame with disaggregated sectors as rows and 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



   .. py:method:: get_total_protein_by_sector()

      Retrieve total protein by sector for both baseline and scenario.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of sector protein as values.
      :rtype: dict



   .. py:method:: get_total_protein_by_sector_df()

      Return total protein as a tidy DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.

      :returns: DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



   .. py:method:: get_total_hnv_land_area_by_sector()

      Retrieve total HNV (High Nature Value) land area by sector for both baseline and scenario.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of HNV land areas as values.
      :rtype: dict



   .. py:method:: get_total_hnv_land_area_by_sector_df()

      Return total HNV land area as a tidy DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.

      :returns: DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



   .. py:method:: get_bioenergy_by_sector()

      Retrieve bioenergy area by sector for both baseline and scenario.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of bioenergy areas as values.
      :rtype: dict



   .. py:method:: get_bioenergy_by_sector_df()

      Return bioenergy area as a tidy DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.

      :returns: DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



   .. py:method:: get_hwp_volume()

      Retrieve the volume of harvested wood products (in cubic meters) for both baseline and scenario.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and HWP volumes as values.
      :rtype: dict



   .. py:method:: get_hwp_volume_df()

      Return the harvested wood products (HWP) volume as a tidy DataFrame with 'baseline' and 'scenario' as columns.

      :returns: DataFrame with 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



   .. py:method:: get_substitution_emission_by_sector_co2e()

      Retrieve substitution emissions by sector for CO2e.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of substitution emissions as values.
      :rtype: dict



   .. py:method:: get_substitution_emission_by_sector_co2e_df()

      Return substitution emissions for CO2e as a tidy DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.

      :returns: DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



   .. py:method:: get_substitution_emission_by_sector_co2()

      Retrieve substitution emissions by sector for CO2.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of substitution emissions as values.
      :rtype: dict



   .. py:method:: get_substitution_emission_by_sector_co2_df()

      Return substitution emissions for CO2 as a tidy DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.

      :returns: DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



   .. py:method:: get_substitution_emission_by_sector_ch4()

      Retrieve substitution emissions by sector for CH4.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of substitution emissions as values.
      :rtype: dict



   .. py:method:: get_substitution_emission_by_sector_ch4_df()

      Return substitution emissions for CH4 as a tidy DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.

      :returns: DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



   .. py:method:: get_substitution_emission_by_sector_n2o()

      Retrieve substitution emissions by sector for N2O.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of substitution emissions as values.
      :rtype: dict



   .. py:method:: get_substitution_emission_by_sector_n2o_df()

      Return substitution emissions for N2O as a tidy DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.

      :returns: DataFrame with sectors as rows and 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



   .. py:method:: get_livestock_population()

      Retrieve the livestock population in number of animals for both baseline and scenario.

      :returns: Dictionary with 'baseline' and 'scenario' as keys and dictionaries of livestock populations as values.
      :rtype: dict



   .. py:method:: get_livestock_population_df()

      Return the livestock population as a tidy DataFrame with 'baseline' and 'scenario' as columns.

      :returns: DataFrame with 'baseline' and 'scenario' as columns.
      :rtype: pd.DataFrame



